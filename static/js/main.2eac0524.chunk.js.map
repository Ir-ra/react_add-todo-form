{"version":3,"sources":["api/users.ts","services/user.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoForm/TodoForm.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","getUserById","userId","usersFromServer","find","user","UserInfo","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","TodoForm","onSubmit","useState","setTitle","hasTitleError","setHasTitleError","setUserId","hasUserIdError","setHasUserIdError","reset","action","method","e","preventDefault","onReset","htmlFor","type","placeholder","value","trim","onChange","event","target","initialTodos","getNewTodotId","Math","max","App","setTodos","data","newTodo","currentTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2eac0524.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../api/users';\nimport { User } from '../types/User';\n\nexport function getUserById(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  // if there is no user with a given userId\n  return foundUser || null;\n}\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article className={classNames(\n      'TodoInfo',\n      {\n        'TodoInfo--completed': completed,\n      },\n    )}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","import React, { useState } from 'react';\nimport usersFromServer from '../../api/users';\nimport { Todo } from '../../types/Todo';\nimport { getUserById } from '../../services/user';\n\ntype Props = {\n  onSubmit: (todo: Todo) => void;\n};\n\nexport const TodoForm: React.FC<Props> = ({ onSubmit }) => {\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n\n    setHasTitleError(false);\n    setHasUserIdError(false);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setHasTitleError(!title);\n    setHasUserIdError(!userId);\n\n    if (!title || !userId) {\n      return;\n    }\n\n    onSubmit({\n      id: 0,\n      userId,\n      title,\n      user: getUserById(userId),\n    });\n\n    reset();\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserIdError(false);\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n      onReset={reset}\n    >\n      <div className=\"field\">\n        <label\n          className=\"label\"\n          htmlFor=\"todo-title\"\n        >\n          <strong>Title: </strong>\n        </label>\n        <input\n          id=\"todo-title\"\n          type=\"text\"\n          data-cy=\"titleInput\"\n          placeholder=\"Title input\"\n          value={title.trim()}\n          onChange={handleTitleChange}\n        />\n\n        {hasTitleError && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n\n      </div>\n\n      <div className=\"field\">\n        <label\n          className=\"label\"\n          htmlFor=\"todo-user-id\"\n        >\n          <strong>User: </strong>\n        </label>\n        <select\n          id=\"todo-user-id\"\n          data-cy=\"userSelect\"\n          value={userId}\n          onChange={handleUserIdChange}\n        >\n          <option value=\"0\">Choose a user</option>\n          {usersFromServer.map(user => (\n            <option\n              value={user.id}\n              key={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {hasUserIdError && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { Todo } from './types/Todo';\n\nimport { getUserById } from './services/user';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { TodoForm } from './components/TodoForm';\n\nexport const initialTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nfunction getNewTodotId(todos: Todo[]) {\n  const maxId = Math.max(...todos.map(todo => todo.id));\n\n  return maxId + 1;\n}\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(initialTodos);\n  const addTodo = ({ id, ...data }: Todo) => {\n    const newTodo = {\n      id: getNewTodotId(todos),\n      ...data,\n    };\n\n    setTodos(currentTodo => [...currentTodo, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm onSubmit={addTodo} />\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}